-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity robotControl is
port (
    dutyLeft : OUT STD_LOGIC_VECTOR (15 downto 0);
    dutyRight : OUT STD_LOGIC_VECTOR (15 downto 0);
    sensors : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of robotControl is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "robotControl_robotControl,hls_ip_2023_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.922625,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=42,HLS_VERSION=2023_1}";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv16_78 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001111000";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv16_50 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001010000";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv16_B4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010110100";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal sensors_read_read_fu_52_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    dutyLeft_assign_proc : process(sensors_read_read_fu_52_p2)
    begin
        if (((sensors_read_read_fu_52_p2 = ap_const_lv8_1) or (sensors_read_read_fu_52_p2 = ap_const_lv8_2) or (sensors_read_read_fu_52_p2 = ap_const_lv8_3))) then 
            dutyLeft <= ap_const_lv16_B4;
        elsif (((sensors_read_read_fu_52_p2 = ap_const_lv8_0) or (sensors_read_read_fu_52_p2 = ap_const_lv8_4))) then 
            dutyLeft <= ap_const_lv16_50;
        elsif ((sensors_read_read_fu_52_p2 = ap_const_lv8_6)) then 
            dutyLeft <= ap_const_lv16_78;
        elsif (((sensors_read_read_fu_52_p2 = ap_const_lv8_7) or (sensors_read_read_fu_52_p2 = ap_const_lv8_5) or (not((sensors_read_read_fu_52_p2 = ap_const_lv8_0)) and not((sensors_read_read_fu_52_p2 = ap_const_lv8_1)) and not((sensors_read_read_fu_52_p2 = ap_const_lv8_2)) and not((sensors_read_read_fu_52_p2 = ap_const_lv8_3)) and not((sensors_read_read_fu_52_p2 = ap_const_lv8_4)) and not((sensors_read_read_fu_52_p2 = ap_const_lv8_5)) and not((sensors_read_read_fu_52_p2 = ap_const_lv8_6)) and not((sensors_read_read_fu_52_p2 = ap_const_lv8_7))))) then 
            dutyLeft <= ap_const_lv16_0;
        else 
            dutyLeft <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dutyRight_assign_proc : process(sensors_read_read_fu_52_p2)
    begin
        if ((sensors_read_read_fu_52_p2 = ap_const_lv8_1)) then 
            dutyRight <= ap_const_lv16_50;
        elsif (((sensors_read_read_fu_52_p2 = ap_const_lv8_0) or (sensors_read_read_fu_52_p2 = ap_const_lv8_3))) then 
            dutyRight <= ap_const_lv16_78;
        elsif (((sensors_read_read_fu_52_p2 = ap_const_lv8_2) or (sensors_read_read_fu_52_p2 = ap_const_lv8_4) or (sensors_read_read_fu_52_p2 = ap_const_lv8_6))) then 
            dutyRight <= ap_const_lv16_B4;
        elsif (((sensors_read_read_fu_52_p2 = ap_const_lv8_7) or (sensors_read_read_fu_52_p2 = ap_const_lv8_5) or (not((sensors_read_read_fu_52_p2 = ap_const_lv8_0)) and not((sensors_read_read_fu_52_p2 = ap_const_lv8_1)) and not((sensors_read_read_fu_52_p2 = ap_const_lv8_2)) and not((sensors_read_read_fu_52_p2 = ap_const_lv8_3)) and not((sensors_read_read_fu_52_p2 = ap_const_lv8_4)) and not((sensors_read_read_fu_52_p2 = ap_const_lv8_5)) and not((sensors_read_read_fu_52_p2 = ap_const_lv8_6)) and not((sensors_read_read_fu_52_p2 = ap_const_lv8_7))))) then 
            dutyRight <= ap_const_lv16_0;
        else 
            dutyRight <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    sensors_read_read_fu_52_p2 <= sensors;
end behav;
